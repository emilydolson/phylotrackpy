# Adapted from ultrajson
# https://github.com/ultrajson/ultrajson
#
# Developed by ESN, an Electronic Arts Inc. studio.
# Copyright (c) 2014, Electronic Arts Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# * Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
# * Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
# * Neither the name of ESN, Electronic Arts Inc. nor the
# names of its contributors may be used to endorse or promote products
# derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL ELECTRONIC ARTS INC. BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

---
name: deploy

on:
  workflow_run:
    workflows:
      - test
    types:
      - completed

jobs:
  build-native-wheels:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macOS-latest, ubuntu-latest]

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: "recursive"

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          cache: pip
          cache-dependency-path: ".github/workflows/deploy.yml"

      - name: Install dependencies
        run: |
          python -m pip install cibuildwheel==2.3.0
          python -m pip install -U twine

      - name: Build wheels
        run: python -m cibuildwheel --output-dir dist
        # Options are supplied via environment variables:
        env:
          # Build separate wheels for macOS's different architectures.
          CIBW_ARCHS_MACOS: "x86_64 arm64"
          # Build only on Linux architectures that don't need qemu emulation.
          CIBW_ARCHS_LINUX: "x86_64 i686"
          # Don't build with prerelease Python versions.
          CIBW_PROJECT_REQUIRES_PYTHON: ">=3.7,<3.11"
          # Run the test suite after each build.
          CIBW_TEST_REQUIRES: "pytest"
          CIBW_TEST_COMMAND: pytest {package}/test_systematics.py

      - name: Upload as build artifacts
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: dist/*.whl

      - name: Publish package to PyPI
        if: startsWith(github.ref, 'refs/tags/v')
        # env:
          # TWINE_USERNAME: __token__
          # TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: twine upload --skip-existing dist/*.whl

  build-QEMU-emulated-wheels:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        architecture: ["aarch64"]
        python-version:
          - pp37
          - pp38
          - cp37
          - cp38
          - cp39
          - cp310

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: "recursive"

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          cache: pip
          cache-dependency-path: ".github/workflows/deploy.yml"

      - name: Install dependencies
        run: |
          python -m pip install cibuildwheel==2.3.0
          python -m pip install -U twine

      # https://github.com/docker/setup-qemu-action
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build wheels
        run: python -m cibuildwheel --output-dir dist
        # Options are supplied via environment variables:
        env:
          # Build only the currently selected Linux architecture (so we can
          # parallelise for speed).
          CIBW_ARCHS_LINUX: "${{ matrix.architecture }}"
          # Likewise, select only one Python version per job to speed this up.
          CIBW_BUILD: "${{ matrix.python-version }}-*"
          # Run the test suite after each build.
          CIBW_TEST_REQUIRES: "pytest"
          CIBW_TEST_COMMAND: pytest {package}/test_systematics.py

      - name: Upload as build artifacts
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: dist/*.whl

      - name: Publish package to PyPI
        if: startsWith(github.ref, 'refs/tags/v')
        # env:
          # TWINE_USERNAME: __token__
          # TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: twine upload --skip-existing dist/*.whl

  build-sdist:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-20.04
    needs: ['build-native-wheels', 'build-QEMU-emulated-wheels']

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: "recursive"

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"
          cache: pip
          cache-dependency-path: "setup.py"

      - name: Install dependencies
        run: |
          python -m pip install -U pip
          python -m pip install -U build twine wheel

      - name: Build package
        run: |
          git tag
          python setup.py --version
          python -m build --sdist
          twine check --strict dist/*

      # - name: Publish package to PyPI
      #   if: startsWith(github.ref, 'refs/tags/v')
      #   uses: pypa/gh-action-pypi-publish@master
      #   with:
          # user: __token__
          # password: ${{ secrets.PYPI_API_TOKEN }}
